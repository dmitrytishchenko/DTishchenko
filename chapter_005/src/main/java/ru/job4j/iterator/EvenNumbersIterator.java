package ru.job4j.iterator;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Создать итератор возвращающий только четные цифры.
 * Итератор должен принимать список произвольных чисел.
 *
 * public EvenIt(final int[] numbers) {
 *
 * Iterator it = new EventIt(new int[] {4, 2, 1, 1});
 *
 * методы
 *
 * it.next() - возвращают только четные числа. В этом примере - это 4 и 2.
 *
 * it.hasNext() - возвращает true, только если в массиве есть четные перед указателем.
 *
 * Например. если мы дернем два раза метод next, то указатель сместить на второй элемент.
 * При вызове метода hasNext - он вернет false. так как после указателя больше нет четных чисел.
 * Перед отправкой решения - убедитесь, что программа успешно проходит тестовые методы из прилагаемого файла.
 *
 *
 * Пожелания:
 * Подробнее
 * Так как вы реализуете итератор, то желательно чтобы его поведение соответствовало спецификации и было ожидаемым
 * для программиста, который будет его использовать. Перед реализацией ознакомьтесь пожалуйста с описанием интерфейса
 * Iterator в спецификации API Java 8 - Iterator
 * метод next в случае отсутствия элементов к возврату генерирует NoSuchElementException.
 * метод next должен возвращать верные значения вне зависимости от того вызвал ли перед этим программист метод hasNext.
 * Аналогично для hasNext. Результат работы ваших методов не должен зависеть от последовательности в которой программист
 * вызывает методы, т.е. не полагайтесь на то, что программист будет вызывать методы именно в том порядке в котором вы ожидаете.
 * не допускайте дублирования кода. Если вы видите, что методы next и hasNext имеют одинаковый код, то выносите этот
 * код в отдельный метод и делайте уже его вызов.
 * не используйте эксепшены для управления логикой вашей программы. Они созданы для обработки критических ситуаций + очень
 * дороги в создании по сравнению с обычными объектами в Java.
 * не оставляйте пустых методов в коде. Обратите внимание, что метод remove объявлен как дефолтный - это значит,
 * что нет необходимости его реализовывать пустым, если вы не собираетесь переопределять его поведение.
 * В коде не должно быть пустых методов, если ваша программа не поддерживает какой-либо функционал задекларированный
 * в интерфейсе - прокидывайте UnsupportedOperationException.
 */

public class EvenNumbersIterator implements Iterator {
    final int[] numbers;
    private int index = 0;

    public EvenNumbersIterator(int[] numbers) {
        this.numbers = numbers;
    }

    @Override
    public boolean hasNext() {
        if (numbers.length == 0) {
            return false;
        }
        for (; index < numbers.length; index++) {
            if (numbers[index] % 2 == 0) {
                return true;
            }
        }
        return false;
    }
    @Override
    public Integer next() throws NoSuchElementException {
        if (!hasNext()) {
            throw new NoSuchElementException("Элемент массива отсутствует");
        }
        return numbers[index++];
    }
}

